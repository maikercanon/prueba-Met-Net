version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0-focal
    container_name: taskmanager-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: taskmanager
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - taskmanager-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/taskmanager --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/taskmanager?authSource=admin
      JWT_SECRET: your_super_secure_jwt_secret_here_change_in_production
      FRONTEND_URL: http://localhost:8080
      # Email configuration (optional)
      EMAIL_PROVIDER: sendgrid
      # SENDGRID_API_KEY: SG.your_key_here
      EMAIL_FROM: noreply@taskmanager.local
      EMAIL_FROM_NAME: Task Manager
    ports:
      - "4000:4000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - taskmanager-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: taskmanager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - taskmanager-network
    profiles:
      - proxy

# Volumes
volumes:
  mongodb_data:
    driver: local

# Networks
networks:
  taskmanager-network:
    driver: bridge 